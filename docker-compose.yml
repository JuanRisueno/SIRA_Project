# Aquí definimos todos los contenedores (servicios) de nuestro proyecto SIRA.
services:

  # 1. Base de Datos (PostgreSQL)
  # -----------------------------
  db:
    image: postgres:16-alpine      # Usamos la imagen oficial de Postgres (versión Alpine, que ocupa menos).
    container_name: sira_db        # Le ponemos un nombre fijo para identificarlo fácil al hacer 'docker ps'.
    restart: unless-stopped        # Para que se reinicie solo si se cae o al arrancar el PC.
    volumes:
      # Creamos un volumen para guardar los datos de la BBDD.
      # Así, aunque borremos el contenedor, los datos no se pierden.
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - sira-network               # Lo conectamos a nuestra red interna.
    environment:
      # Variables para configurar la BBDD al crearla.
      # Coge los valores de nuestro fichero .env local.
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}

  # 2. API (Python con FastAPI)
  # ---------------------------
  api:
    build: ./backend               # Construye la imagen de la API usando el Dockerfile de la carpeta 'backend'.
    container_name: sira_api
    restart: unless-stopped
    depends_on: # IMPORTANTE: La API no arranca hasta que la base de datos 'db' esté lista.
      - db
    volumes:
      # CLAVE para desarrollar: Mapeamos nuestro código a la carpeta del contenedor.
      # Así, los cambios que hacemos en VSCode se ven al momento sin tener que reconstruir la imagen.
      - ./backend:/app
    networks:
      - sira-network               # La conectamos a la misma red para que hable con la BBDD.
    environment:
      # Le pasamos a Python la URL para que sepa cómo conectar a la BBDD.
      # El host es 'db' (el nombre del servicio), no 'localhost', porque están en la misma red de Docker.
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}

  # 3. Servidor Web (Nginx)
  # -----------------------
  nginx:
    image: nginx:latest            # Usamos la imagen oficial de Nginx.
    container_name: sira_nginx
    restart: unless-stopped
    ports:
      # Mapeamos el puerto 80 del PC al 80 del contenedor.
      # Esto es lo que nos permite entrar desde el navegador a http://localhost.
      - "80:80"
    volumes:
      # Le pasamos nuestro fichero de configuración personalizado a Nginx.
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - sira-network
    depends_on:
      # Nginx debe esperar a que la API esté funcionando para no dar un error 502.
      - api

# Aquí se declara el volumen 'postgres_data' que usamos en el servicio 'db'.
volumes:
  postgres_data:

# Aquí creamos la red que hemos llamado 'sira-network'.
# Al ser 'bridge', los contenedores dentro de ella se pueden comunicar usando sus nombres.
networks:
  sira-network:
    driver: bridge